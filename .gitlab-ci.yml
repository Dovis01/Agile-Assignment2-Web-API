# Node docker image on which this would be run
image: node:latest

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  NODE_ENV: 'test'

cache:
  key:
    files:
      - package.json
  paths:
    - .npm
    - node_modules
    - build

services:
  - mongo

stages:
  - install
  - build
  - test
  - staging
  - deployment
  - delivery

# Jobs:

install_dependencies:
  stage: install
  script:
    - npm  ci

build_api:
  stage: build
  before_script:
    - npm run clean
  script:
    - npm run build

test_api:
  stage: test
  script:
    - export CI_BRANCH=$CI_COMMIT_REF_NAME
    - npm test
    - npm run coverage

deploy_staging:
  image: ruby:latest
  stage: staging
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY
    - echo "Deployed to staging server"

continuous_deployment_production:
  image: ruby:latest
  only:
    - main
  stage: deployment
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PRODUCTION --api-key=$HEROKU_API_KEY
    - echo "Deploy to production server automatically"

continuous_delivery_production:
  image: ruby:latest
  only:
    - develop
  stage: delivery
  when: manual
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_PRODUCTION --api-key=$HEROKU_API_KEY
    - echo "Deliver to production server manually"

